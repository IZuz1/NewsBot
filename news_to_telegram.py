# –ü–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Perplexity –≤ Telegram –∫–∞–Ω–∞–ª
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install requests schedule python-dotenv

import requests
import schedule
import time
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –í–∞—à–∏ –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã
PERPLEXITY_API_KEY = os.getenv('PERPLEXITY_API_KEY')  # –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: "your_api_key_here"
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')  # –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: "your_token_here"
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')      # –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: "your_chat_id_here"

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤—Å—Ç–∞–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production):
# PERPLEXITY_API_KEY = "ppl_your_api_key_here"
# TELEGRAM_BOT_TOKEN = "123456789:ABCDefGHIjklmnoPQRstuvWXYZ"
# TELEGRAM_CHAT_ID = "123456789"

class NewsBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram"""

    def __init__(self, perplexity_key, telegram_token, telegram_chat_id):
        self.perplexity_key = perplexity_key
        self.telegram_token = telegram_token
        self.telegram_chat_id = telegram_chat_id
        self.perplexity_url = "https://api.perplexity.ai/chat/completions"
        self.telegram_url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"

    def get_news_from_perplexity(self, topic, search_recency="day"):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–∑ Perplexity API
        - topic: —Ç–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        - search_recency: —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (hour, day, week, month)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            headers = {
                "Authorization": f"Bearer {self.perplexity_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": "sonar",
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."},
                    {"role": "user", "content": f"–ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –≤ –æ–±–ª–∞—Å—Ç–∏: {topic}? –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å —Å—Å—ã–ª–∫–∞–º–∏."}
                ],
                "max_tokens": 800,
                "temperature": 0.2,
                "search_recency_filter": search_recency,
                "top_p": 0.9
            }
            response = requests.post(self.perplexity_url, headers=headers, json=payload, timeout=30)
            response.raise_for_status()
            data = response.json()
            if 'choices' in data and len(data['choices']) > 0:
                content = data['choices'][0]['message']['content']
                sources = data.get('search_results', [])
                return {
                    'content': content,
                    'sources': sources,
                    'tokens_used': data.get('usage', {}).get('total_tokens', 0)
                }
            else:
                print(f"–û—à–∏–±–∫–∞ Perplexity API: {data}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity: {str(e)}")
            return None
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return None

    def format_telegram_message(self, topic, news_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram (–ö–û–ú–ü–ê–ö–¢–ù–û!)
        """
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        msg = f"<b>üì∞ {topic}</b>\n"
        msg += f"<i>{timestamp}</i>\n\n"
        msg += f"{news_data['content'].strip()}\n"
        if news_data['sources']:
            links = [
                f"<a href='{src.get('url', '#')}'>{src.get('title', '–ò—Å—Ç–æ—á–Ω–∏–∫')[:30]}</a>"
                for src in news_data['sources'][:2]
            ]
            msg += '\nüîó ' + " | ".join(links)
        return msg

    def send_to_telegram(self, message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
        - message: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            data = {
                "chat_id": self.telegram_chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            response = requests.post(self.telegram_url, data=data, timeout=10)
            response.raise_for_status()
            result = response.json()
            if result.get('ok'):
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False

    def send_news(self, topic):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram
        - topic: —Ç–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        print(f"üîç –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: {topic}")
        news_data = self.get_news_from_perplexity(topic, search_recency="day")
        if news_data is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
            return False
        message = self.format_telegram_message(topic, news_data)
        success = self.send_to_telegram(message)
        if success:
            print(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
        return success

    def schedule_news(self, topic, time_str):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        - topic: —Ç–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        - time_str: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"HH:MM\" (–Ω–∞–ø—Ä–∏–º–µ—Ä \"10:30\")
        """
        schedule.every().day.at(time_str).do(self.send_news, topic=topic)
        print(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {topic} - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}")

    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ"""
        print("ü§ñ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)
        except KeyboardInterrupt:
            print("\\n‚õî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# ============== –ü–†–ò–ú–ï–†–´ ==============

def example_single_news():
    """–ü—Ä–∏–º–µ—Ä 1: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑"""
    bot = NewsBot(PERPLEXITY_API_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    bot.send_news("–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –î–ù–† –∏ –õ–ù–†")
    # bot.send_news("—Å–æ–±—ã—Ç–∏—è –≤ –£–∫—Ä–∞–∏–Ω–µ")
    # bot.send_news("–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Ä—ã–Ω–æ–∫")

def example_scheduled_news():
    """–ü—Ä–∏–º–µ—Ä 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    bot = NewsBot(PERPLEXITY_API_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    # bot.schedule_news("–ø–æ–ª–∏—Ç–∏–∫–∞ –î–ù–†", "10:00")
    # bot.schedule_news("—Å–æ–±—ã—Ç–∏—è –£–∫—Ä–∞–∏–Ω—ã", "14:00")
    # bot.schedule_news("—ç–∫–æ–Ω–æ–º–∏–∫–∞", "18:00")
    bot.run_scheduler()

def example_multiple_topics():
    """–ü—Ä–∏–º–µ—Ä 3: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–µ–º–∞–º"""
    bot = NewsBot(PERPLEXITY_API_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    topics = [
        "–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –î–ù–†",
        "—Å–æ–±—ã—Ç–∏—è –≤ –õ—É–≥–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
        "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–∞ –ø–æ–¥–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö"
    ]
    for topic in topics:
        print(f"\\n{'='*50}")
        bot.send_news(topic)
        time.sleep(2)

# ============== –ì–õ–ê–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ==============

if __name__ == "__main__":
    if not PERPLEXITY_API_KEY or not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env —Ñ–∞–π–ª–µ:")
        print("  PERPLEXITY_API_KEY=your_key_here")
        print("  TELEGRAM_BOT_TOKEN=your_token_here")
        print("  TELEGRAM_CHAT_ID=your_chat_id_here")
        exit(1)

    print("ü§ñ NewsBot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram")
    print("\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)")
    print("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–µ–º–∞–º")
    choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    if choice == "1":
        example_single_news()
    elif choice == "2":
        example_scheduled_news()
    elif choice == "3":
        example_multiple_topics()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
